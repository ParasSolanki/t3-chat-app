// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String
    username      String          @unique
    email         String          @unique
    password      Password?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    channels      Channel[]
    channelMember ChannelMember[]
    createdAt     DateTime        @default(now()) @map("created_at")
    updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
}

model Password {
    hash   String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ChannelMember {
    id        String   @id @default(cuid())
    channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
    channelId String   @map("channel_id")
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @map("user_id")
    role      String   @default("MEMBER")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")

    @@unique([userId, channelId])
}

model Channel {
    id          String          @id @default(cuid())
    name        String          @unique
    description String
    createdBy   User            @relation(fields: [createdById], references: [id])
    createdById String          @unique @map("created_by_id")
    members     ChannelMember[]
    createdAt   DateTime        @default(now()) @map("created_at")
    updatedAt   DateTime        @default(now()) @map("updated_at")
}
